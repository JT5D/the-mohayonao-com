// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    'use strict';

    var $func, BUFFER_MASK, BUFFER_SIZE, MozPlayer, OneLinerProcessor, OperaPlayer, Player, SAMPLERATE, WebKitPlayer, commit, elem_map, history, init_history, player, processor, q;
    SAMPLERATE = 8000;
    BUFFER_SIZE = 1 << 16;
    BUFFER_MASK = BUFFER_SIZE - 1;
    MutekiTimer.use();
    processor = new (OneLinerProcessor = (function() {
      var onmessage;

      function OneLinerProcessor() {
        this.buffer = new Uint8Array(BUFFER_SIZE);
        this.rindex = this.windex = this.timerId = 0;
        this.acceptTimerId = 0;
      }

      onmessage = function(e) {
        var i, stream, _i, _ref, _results;
        if (e.data instanceof Array) {
          stream = e.data;
          _results = [];
          for (i = _i = 0, _ref = stream.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(this.buffer[this.windex++ & BUFFER_MASK] = stream[i]);
          }
          return _results;
        } else {
          switch (e.data) {
            case 'error':
              return typeof this.onerror === "function" ? this.onerror() : void 0;
            case 'accept':
              this.accept = true;
              return typeof this.onaccept === "function" ? this.onaccept() : void 0;
          }
        }
      };

      OneLinerProcessor.prototype.start = function() {
        var _this = this;
        if (this.timerId !== 0) {
          clearInterval(this.timerId = 0);
        }
        return this.timerId = setInterval(function() {
          if (_this.windex - 4096 < _this.rindex) {
            return _this.worker.postMessage(0);
          }
        }, 100);
      };

      OneLinerProcessor.prototype.stop = function() {
        if (this.timerId !== 0) {
          clearInterval(this.timerId = 0);
        }
        return this.timerId = 0;
      };

      OneLinerProcessor.prototype.fetch = function() {
        return this.buffer[this.rindex++ & BUFFER_MASK];
      };

      OneLinerProcessor.prototype.setFunction = function(func) {
        var _this = this;
        this.func = func;
        this.worker = new Worker('/one-liner-music/worker.js');
        this.worker.onmessage = onmessage.bind(this);
        this.accept = false;
        this.worker.postMessage(this.func);
        if (this.acceptTimerId) {
          clearTimeout(this.acceptTimerId);
        }
        return this.acceptTimerId = setTimeout(function() {
          if (!_this.accept) {
            return typeof _this.onerror === "function" ? _this.onerror() : void 0;
          }
        }, 500);
      };

      return OneLinerProcessor;

    })());
    Player = (function() {

      function Player() {}

      Player.prototype.play = function() {
        return this.isPlaying = true;
      };

      Player.prototype.pause = function() {
        return this.isPlaying = false;
      };

      return Player;

    })();
    WebKitPlayer = (function(_super) {

      __extends(WebKitPlayer, _super);

      WebKitPlayer.isEnabled = function() {
        return typeof webkitAudioContext !== "undefined" && webkitAudioContext !== null;
      };

      function WebKitPlayer(processor) {
        this.processor = processor;
        this.context = new webkitAudioContext();
        this.samples = 0;
        this.dt = SAMPLERATE / this.context.sampleRate;
        this.value = 0;
      }

      WebKitPlayer.prototype.play = function() {
        var _this = this;
        this.isPlaying = true;
        this.bufSrc = this.context.createBufferSource();
        this.jsNode = this.context.createJavaScriptNode(4096, 1, 1);
        this.jsNode.onaudioprocess = function(e) {
          var i, output, _i, _ref, _results;
          output = e.outputBuffer.getChannelData(0);
          _results = [];
          for (i = _i = 0, _ref = output.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            if (_this.samples <= 0) {
              _this.value = _this.processor.fetch();
              _this.samples += 1;
            }
            _this.samples -= _this.dt;
            _results.push(output[i] = _this.value / 256);
          }
          return _results;
        };
        this.bufSrc.connect(this.jsNode);
        this.jsNode.connect(this.context.destination);
        this.bufSrc.noteOn(0);
        return this.processor.start();
      };

      WebKitPlayer.prototype.pause = function() {
        this.isPlaying = false;
        this.bufSrc.disconnect();
        this.jsNode.disconnect();
        return this.processor.stop();
      };

      return WebKitPlayer;

    })(Player);
    MozPlayer = (function(_super) {
      var SAMPLES;

      __extends(MozPlayer, _super);

      MozPlayer.isEnabled = function() {
        var a;
        a = new Audio();
        return typeof a.mozSetup === 'function';
      };

      SAMPLES = 1024;

      function MozPlayer(processor) {
        this.processor = processor;
        this.timerId = 0;
      }

      MozPlayer.prototype.play = function() {
        var audio, stream, written,
          _this = this;
        this.isPlaying = true;
        audio = new Audio();
        audio.mozSetup(1, SAMPLERATE);
        if (this.timerId !== 0) {
          clearInterval(this.timerId);
        }
        written = 0;
        stream = new Float32Array(SAMPLES);
        this.timerId = setInterval(function() {
          var i, offset, _i, _ref;
          offset = audio.mozCurrentSampleOffset();
          if (offset > 0 && written > offset + 16384) {
            return;
          }
          for (i = _i = 0, _ref = stream.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            stream[i] = _this.processor.fetch() / 256;
          }
          audio.mozWriteAudio(stream);
          return _this.written += i;
        }, SAMPLES / SAMPLERATE * 1000);
        return this.processor.start();
      };

      MozPlayer.prototype.pause = function() {
        this.isPlaying = false;
        if (this.timerId !== 0) {
          clearInterval(this.timerId);
        }
        return this.processor.stop();
      };

      return MozPlayer;

    })(Player);
    OperaPlayer = (function(_super) {
      var SAMPLES, WAVEHEADER;

      __extends(OperaPlayer, _super);

      OperaPlayer.isEnabled = function() {
        return /opera/i.test(navigator.userAgent);
      };

      SAMPLES = 4096;

      WAVEHEADER = (function() {
        var bits, channel, l1, l2, samplerate, samples;
        samplerate = SAMPLERATE;
        channel = 1;
        samples = SAMPLES;
        bits = 1;
        l1 = (samples * channel * bits) - 8;
        l2 = l1 - 36;
        return String.fromCharCode(0x52, 0x49, 0x46, 0x46, (l1 >> 0) & 0xff, (l1 >> 8) & 0xff, (l1 >> 16) & 0xff, (l1 >> 24) & 0xff, 0x57, 0x41, 0x56, 0x45, 0x66, 0x6D, 0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, channel, 0x00, (samplerate >> 0) & 0xFF, (samplerate >> 8) & 0xFF, (samplerate >> 16) & 0xFF, (samplerate >> 24) & 0xFF, ((samplerate * channel * bits) >> 0) & 0xFF, ((samplerate * channel * bits) >> 8) & 0xFF, ((samplerate * channel * bits) >> 16) & 0xFF, ((samplerate * channel * bits) >> 24) & 0xFF, bits * channel, 0x00, 8 * bits, 0x00, 0x64, 0x61, 0x74, 0x61, (l2 >> 0) & 0xFF, (l2 >> 8) & 0xFF, (l2 >> 16) & 0xFF, (l2 >> 24) & 0xFF);
      })();

      function OperaPlayer(processor) {
        this.processor = processor;
        this.timerId = 0;
      }

      OperaPlayer.prototype.play = function() {
        var _this = this;
        this.isPlaying = true;
        if (this.timerId !== 0) {
          clearInterval(this.timerId);
        }
        this.audio = new Audio();
        this.timerId = setInterval(function() {
          var i, wave, _i;
          _this.audio.play();
          wave = WAVEHEADER;
          for (i = _i = 0; 0 <= SAMPLES ? _i < SAMPLES : _i > SAMPLES; i = 0 <= SAMPLES ? ++_i : --_i) {
            wave += String.fromCharCode(_this.processor.fetch());
          }
          return _this.audio = new Audio("data:audio/wav;base64," + (btoa(wave)));
        }, SAMPLES / SAMPLERATE * 1000);
        return this.processor.start();
      };

      OperaPlayer.prototype.pause = function() {
        this.isPlaying = false;
        if (this.timerId !== 0) {
          clearInterval(this.timerId);
        }
        return this.processor.stop();
      };

      return OperaPlayer;

    })(Player);
    player = (function() {
      if (WebKitPlayer.isEnabled()) {
        return new WebKitPlayer(processor);
      }
      if (MozPlayer.isEnabled()) {
        return new MozPlayer(processor);
      }
      if (OperaPlayer.isEnabled()) {
        return new OperaPlayer(processor);
      }
      return new Player(processor);
    })();
    $('#play').on('click', function() {
      if (player.isPlaying) {
        player.pause();
        return $(this).css({
          color: 'black'
        });
      } else {
        player.play();
        return $(this).css({
          color: 'red'
        });
      }
    });
    $func = $('#func');
    elem_map = {};
    init_history = ['(t>>4)&((t<<5)|(Math.sin(t)*3000))', 't<<(t&7)|(t*(t/500)*0.25)', '(t&(t>>10))*(t>>11)&(15<<(t>>16))|t*(t+12)>>(t>>14)&13', '(t<<1)/(~t&(1<<(t&15)))', '(t*5&t>>7)|(t*3&t>>10)', 't*((t>>12|t>>8)&63&t>>4)'];
    history = JSON.parse(localStorage.getItem('history')) || init_history;
    (function() {
      var h, list, _i, _len, _results;
      list = history.slice(0);
      list.reverse();
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        h = list[_i];
        elem_map[h] = $('<li>').text(h);
        _results.push($('#history').after(elem_map[h]));
      }
      return _results;
    })();
    commit = function() {
      var func;
      func = $func.css({
        color: 'black'
      }).val();
      return processor.setFunction(func);
    };
    $func.on('keyup', function(e) {
      if (e.keyCode === 13) {
        return commit();
      }
    });
    processor.onerror = function() {
      return $func.css({
        color: 'red'
      });
    };
    processor.onaccept = function() {
      var func, h, i, isExists, _i, _len;
      func = processor.func;
      isExists = false;
      for (i = _i = 0, _len = history.length; _i < _len; i = ++_i) {
        h = history[i];
        if (h === func) {
          isExists = true;
          history.splice(i, 1);
          break;
        }
      }
      if (!isExists) {
        elem_map[func] = $('<li>').text(func);
      } else {
        elem_map[func].remove();
      }
      $('#history').after(elem_map[func]);
      history.unshift(func);
      history = history.slice(0, 25);
      return localStorage.setItem('history', JSON.stringify(history));
    };
    $('#tweet').on('click', function() {
      var baseurl, func, h, lis, text, url, w, x, y;
      w = 550;
      h = 250;
      x = Math.round(screen.width * 0.5 - w * 0.5);
      y = Math.round(screen.height * 0.5 - h * 0.5);
      baseurl = location.protocol + "//" + location.host + location.pathname;
      text = "いい曲できた";
      func = encodeURIComponent(processor.func);
      lis = ["http://twitter.com/share?lang=ja", "text=" + text, "url=" + encodeURIComponent("" + baseurl + "?" + func)];
      url = lis.join("&");
      return window.open(url, "intent", "width=" + w + ",height=" + h + ",left=" + x + ",top=" + y);
    });
    if ((q = location.search.substr(1))) {
      $func.val(decodeURIComponent(q));
    } else if (history[0]) {
      $func.val(history[0]);
    }
    commit();
    if (!/(iphone|ipad|android)/i.test(navigator.userAgent)) {
      return $('#play').click();
    }
  });

}).call(this);
